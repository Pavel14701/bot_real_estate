import time, random, contextlib, schedule, threading
from datetime import datetime
from bot_instance import bot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.apihelper import ApiTelegramException
from datasets.database import User
from fsm import cache_storage
from utils.utils import send_image

class SendReminders:
    #TO DO create table in database and add specific data into database,
    #create methods for this data returning at database
    urls=[
        'https://vc.ru/u/1529738-pashtet-medved/806795-kak-prodat-kvartiru-za-rekordnuyu-cenu-ispolzuem-dizayn-socseti-i-kontent',
        'https://vc.ru/u/1529738-pashtet-medved/803809-dohodnyy-analiz-ceny-kak-prodat-po-maksimumu-kommercheskuyu-nedvizhimost-i-zhile-pod-arendu',
        'https://vc.ru/u/1529738-pashtet-medved/812682-kak-provesti-analiz-rynka-nedvizhimosti-poshagovoe-rukovodstvo-dlya-investorov-pokupateley-i-prodavcov',
        'https://vc.ru/u/1529738-pashtet-medved/883502-dohodnyy-sposob-ocenki-nedvizhimosti-s-ispolzovaniem-zakona-metkalfa',
        'https://vc.ru/u/1529738-pashtet-medved/801207-zatratnyy-metod-ocenki-nedvizhimosti-kak-uznat-cenu-nizhe-kotoroy-prodavat-nelzya'
    ]
    images=[
        './content/mail/1.jpg', './content/mail/2.jpg',
        './content/mail/3.jpg', './content/mail/4.jpg',
        './content/mail/5.jpg'
    ]

    def messages(self, user:User) -> list:
        return [
            f'–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, {user.first_name} {user.last_name}!\n –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ —Å—Ç–∞—Ç—å—é –æ —Ç–æ–º \
                –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω–∞ \—à–∏—Ä–æ–∫–∞—è, –∞ –≥–ª–∞–≤–Ω–æ–µ –≥—Ä–∞–º–æ—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ \
                –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.\n –° –Ω–µ–π –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ',
            f'{user.first_name} {user.last_name}, –¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä. –£ –º–µ–Ω—è —Å–Ω–æ–≤–∞ –¥–ª—è –≤–∞—Å –ø–æ—Ä—Ü–∏—è \
                —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –º—ã –∑–∞—Ç—Ä–æ–Ω–µ–º –æ—Ü–µ–Ω–∫—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ \n –¥–æ—Ö–æ–¥–Ω—ã–º \
                —Å–ø–æ—Å–æ–±–æ–º, –æ–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å, –Ω–æ –∏ –≤—ã—á–∏—Å–ª–∏—Ç—å \n –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å \
                —Å–¥–∞—á–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –∞—Ä–µ–Ω–¥—É. –°—Å—ã–ª–∫–∞ –Ω–∏–∂–µ ...',
            f'–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name} {user.last_name}! \n –ù–µ —Ö–æ—Ç–∏—Ç–µ –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª \
                –æ —Ç–æ–º –∫–∞–∫ –Ω–∞—É—á–∏—Ç—Å—è –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–∞ —Ä—ã–Ω–∫–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏? \n –ï—Å–ª–∏ –≥–æ—Ä–∏—Ç–µ –∂–µ–ª–∞–Ω–∏–µ–º, \
                —Å—Å—ã–ª–æ—á–∫–∞ –±—É–¥–µ—Ç –Ω–∏–∂–µ.',
            f'–ö–∞–∫ –≤–∞–º –≤–µ—á–µ—Ä, {user.first_name} {user.last_name}?\n –ù–µ —Ö–æ—Ç–∏—Ç–µ —Å–∫–æ—Ä–∞—Ç–∞—Ç—å –µ–≥–æ –∑–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏–µ–º \
                —á–µ–≥–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ?\n –¢–∞–º —É –Ω–∞—Å –µ—Å—Ç—å –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –æ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –º–µ—Ç–æ–¥–µ –æ—Ü–µ–Ω–∫–∏, \
                –µ—Å–ª–∏ —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∫–∞–∫ –≤—Å–µ–≥–¥–∞ –Ω–∏–∂–µ...',
            f'–Ø –≤–∞–º –Ω–µ –ø–æ–º–µ—à–∞–ª, {user.first_name} {user.last_name}? –£ –º–µ–Ω—è –¥–ª—è –≤–∞—Å —à–∏–∫–∞—Ä–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –Ω–µ \
                —Ö–æ—Ç–∏—Ç–µ —Å–∫–æ—Ä–æ—Ç–∞—Ç—å –ø–æ–ª—á–∞—Å–∏–∫–∞ \n –∑–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏–µ–º —Ö–æ—Ä–æ—à–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ —Ç–æ–º –∫–∞–∫ –æ—Ü–µ–Ω–∏—Ç—å \
                –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –ø–æ –µ—ë —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º. –ò –¥–∞ —Å—Å—ã–ª–æ—á–∫–∞ —Å–Ω–∏–∑—É.'
        ]


    def send_mailing(self) -> None:
        try:
            users:list[User] = User.return_all_users()
            for user in users:
                if user.active and user.messages < len(self.images):
                    send_image(user.chat_id, self.images[user.messages], self.messages[user.messages], self.create_keyboard(self.urls[user.messages]))
                    user.messages += 1
        except ApiTelegramException:
            user.active = False


    def create_keyboard(self, url:str) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç—å—é', url=url))
        return keyboard

    def send_reminders(self) -> None:
        reminder_states = cache_storage.get_all_reminder_states()
        for chat_id, state in reminder_states.items():
            with contextlib.suppress(ApiTelegramException):
                match state:
                    case 'cac_started':
                        message = '–ü–æ—Ö–æ–∂–µ, –≤—ã –∑–∞–±—ã–ª–∏ –æ–±–æ –º–Ω–µüò•! –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?'
                    case 'cac_in_progress':
                        message = '–Ø –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ –≤—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ï—Å—Ç—å —á—Ç–æ-—Ç–æ, –≤ —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?'
                    case 'r_in_started':
                        message = '–ü–æ—Ö–æ–∂–µ, –≤—ã –∑–∞–±—ã–ª–∏ –æ–±–æ –º–Ω–µüò•! –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?'
                    case 'r_in_progress':
                        message = '–Ø –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ –≤—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ï—Å—Ç—å —á—Ç–æ-—Ç–æ, –≤ —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?'
                bot.send_message(chat_id, message)

    def schedule_message_sending(self):
        hour = random.randint(18, 20)
        minute = random.randint(0, 59)
        time_str = f"{hour:02d}:{minute:02d}"
        schedule.every(2).days.at(time_str).do(self.send_mailing)

    def reschedule_message_sending(self):
        schedule.clear(self.send_mailing)
        self.schedule_message_sending()

    schedule_message_sending()
    schedule.every(2).days.at("21:01").do(reschedule_message_sending)
    schedule.every(3).hours.do(send_reminders)
    schedule.every(2).days.at("18:00").do(send_mailing)

    def run_scheduler(self):
        while True:
            schedule.run_pending()
            time.sleep(1)

    scheduler_thread = threading.Thread(target=run_scheduler)
    scheduler_thread.start()