from abc import ABC
import time
from decimal import Decimal
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from telebot.states.sync.context import StateContext
from bot_instance import bot
from fsm import cache_storage, UserStates
from realtor_fee_calculating.functions import FeeCalculatingFunctions
from utils.utils import run_in_thread, update_msg_to_del, del_msg
from utils.middlewares import LogExceptionMiddlewareMeta


class FeeCalculatingTypes(ABC):
    def __init__(self):
        super().__init__()


    def create_keyboard1(self) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('üíµ –î–û–õ–õ–ê–† –°–®–ê', callback_data='USD'))
        keyboard.add(InlineKeyboardButton('üí∂ –ï–í–†–û', callback_data='EUR'))
        keyboard.add(InlineKeyboardButton('üá®üá≥ –ö–ò–¢–ê–ô–°–ö–ò–ô –Æ–ê–ù–¨', callback_data='CNY'))
        keyboard.add(InlineKeyboardButton('üáßüáæ –ë–ï–õ–û–†–£–°–°–ö–ò–ô –†–£–ë–õ–¨', callback_data='BYN'))
        keyboard.add(InlineKeyboardButton('üá∑üá∫ –†–û–°–°–ò–ô–°–ö–ò–ô –†–£–ë–õ–¨', callback_data='RUB'))
        keyboard.row(InlineKeyboardButton('–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ?', url='https://t.me/Pashtet_Medved'), InlineKeyboardButton('–ù–∞—à —Å–∞–π—Ç', url='https://domitochka.by'))
        keyboard.add(InlineKeyboardButton('‚öí –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
        return keyboard


    def create_keyboard2(self) -> InlineKeyboardMarkup:
        # sourcery skip: class-extract-method
        keyboard = InlineKeyboardMarkup()
        keyboard.row(InlineKeyboardButton('–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ?', url='https://t.me/Pashtet_Medved'), InlineKeyboardButton('–ù–∞—à —Å–∞–π—Ç', url='https://domitochka.by'))
        keyboard.row(InlineKeyboardButton('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'), InlineKeyboardButton('–†–µ—Å—Ç–∞—Ä—Ç', callback_data='cf_restart'))
        return keyboard


    def create_keyboard3(self) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardMarkup()
        keyboard.row(InlineKeyboardButton('–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ?', url='https://t.me/Pashtet_Medved'), InlineKeyboardButton('–ù–∞—à —Å–∞–π—Ç', url='https://domitochka.by'))
        keyboard.row(InlineKeyboardButton('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'), InlineKeyboardButton('–†–µ—Å—Ç–∞—Ä—Ç', callback_data='cf_restart'))
        return keyboard


class FeeCalculating(FeeCalculatingTypes, meta_class=LogExceptionMiddlewareMeta):
    _instance = None


    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance


    def __init__(self) -> None:
        super().__init__()


    def send_greeting(self, chat_id:int|str, user_id:int|str) -> None:
        del_msg(chat_id, user_id)
        with open('./content/calc_fee/hello.jpg', "rb") as img1:
            to_del = [bot.send_photo(chat_id, img1, caption="–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∏—ç–ª—Ç–æ—Ä—Å–∫–∏—Ö —É—Å–ª—É–≥. –Ø –º–æ–≥—É —É—á–∏—Ç—ã–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –≤–∞–ª—é—Ç—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")]
        to_del.append(bot.send_message(chat_id, "–ú–µ–Ω—é:", reply_markup=self.create_keyboard1()))
        update_msg_to_del(chat_id, user_id, to_del)


    def price_for_fee_input(self, chat_id:int|str, user_id:int|str, state:StateContext) -> None:
        state.set(UserStates.waiting_price_for_fee)
        cf_chosen_currency = cache_storage.get_value(user_id, chat_id, 'cf_chosen_currency')
        del_msg(chat_id, user_id)
        with open('./content/calc_fee/price.jpg', 'rb') as img1:
            to_del = [bot.send_photo(chat_id, img1, caption=f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ {cf_chosen_currency}.")]
        to_del.append(bot.send_message(chat_id, "–ú–µ–Ω—é", reply_markup=self.create_keyboard2()))
        update_msg_to_del(chat_id, user_id, to_del)


    @bot.message_handler(state=UserStates.waiting_price_for_fee)
    @run_in_thread()
    def validate_price_input(self, message:Message) -> None:
        chat_id, user_id = message.chat.id, message.from_user.id
        del_msg(chat_id, user_id)
        cf_chosen_currency = cache_storage.get_value(user_id, chat_id, 'cf_chosen_currency')
        try:
            cf_price = int(message.text)
        except ValueError:
            to_del = bot.send_message(user_id, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.", reply_to_message_id=message.message_id)
            update_msg_to_del(chat_id, user_id, to_del)
            time.sleep(2)
            return self.price_for_fee_input(chat_id, user_id, StateContext(message, bot))
        if cf_price < 1 or cf_price > 100000000000:
            to_del = bot.send_message(user_id, "–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.", reply_to_message_id=message.message_id)
            update_msg_to_del(chat_id, user_id, to_del)
            time.sleep(2)
            return self.price_for_fee_input(chat_id, user_id, StateContext(message, bot))
        if message.text != str(cf_price):
            to_del = bot.send_message(user_id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.", reply_to_message_id=message.message_id)
            update_msg_to_del(chat_id, user_id, to_del)
            time.sleep(2)
            return self.price_for_fee_input(chat_id, user_id, StateContext(message, bot))
        cf_price = Decimal(cf_price)
        cache_storage.set_value(user_id, chat_id, 'cf_price', cf_price)
        results = FeeCalculatingFunctions(chat_id, user_id).calculate_fee()
        with open('./content/rent/forecast.jpg', 'rb') as img1:
            to_del = [bot.send_photo(chat_id, img1, caption=f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∏—ç–ª—Ç–æ—Ä—Å–∫–æ–π —É—Å–ª—É–≥–∏ –≤ –≤–∞—à–µ–º —Å–ª—É—á–∞–µ —Å–æ—Å—Ç–∞–≤–∏—Ç \
                {int(results['cf_percent'])} {cf_chosen_currency}, {results['cf_fee'] * 100}%.")]
        to_del.append(bot.send_photo(chat_id, "–ú–µ–Ω—é", reply_markup=self.create_keyboard3()))
        update_msg_to_del(chat_id, user_id, to_del)


    def restart(self, chat_id:int|str, user_id:int|str) -> None:
        del_msg(chat_id, user_id)
        self.send_greeting(chat_id, user_id)